<?php
//main file
include ('main.php');


$CLI =  new cli();

$COMAND = $CLI ->get_comand();

//print_r($COMAND);

if($COMAND[0] == 'cli'){

    //version
    if($COMAND[1] == '--v'){
        $CLI->success( '4.1');
    }
    elseif($COMAND[1] == '--version'){
        $CLI->success( '4.1');
    }
    //help
    elseif($COMAND[1] == '--help'){
        $CLI->output( '--serve = starts new php server at port 80'."\n");
        $CLI->output( '--v = show current version'."\n");
        $CLI->output( '--config = configure the installation'."\n");
        $CLI->output( '--git = git comands'."\n");
        $CLI->output( 'create (arguments) = creates files and funtions'."\n");
        $CLI->output( 'drop-tables = drops the entire database'."\n");
        $CLI->output( 'recreate-tables = drops and creates the database again'."\n");
        $CLI->output( 'test (arguments) = tests functions'."\n");
        $CLI->output( 'run (command file name without .php) = runs your custom comands'."\n");
        $CLI->output( 'db backup = do a full db backup'."\n");
        $CLI->output( 'db restore = restore db from backup file'."\n");
    }
    elseif($COMAND[1] == '--serve'){
        if(file_exists('docker-compose.yaml') && file_exists('Dockerfile') && file_exists('config.ini')){
            if(shell_exec('docker-compose up')){
                $port = $config['port'];
                $CLI->success("Docker container started at: http://localhost:".$port);
            }else{
                if($COMAND[2] == ""){
                    if(file_exists('config.ini')){
                        $port = $config['port'];
                    }else{
                        $port = "8080";
                    }
                    $CLI->success("Server started at: http://localhost:".$port);
                    shell_exec("php -S 0.0.0.0:".$port." -t public/");
                }else{
                    $port = $COMAND[2];
                    $CLI->success("Server started at: http://localhost:$port");
                    shell_exec("php -S 0.0.0.0:".$port." -t public/");
                }
            }
        }else{
            if($COMAND[2] == ""){
                if(file_exists('config.ini')){
                    $port = $config['port'];
                }else{
                    $port = "8080";
                }
                $CLI->success("Server started at: http://localhost:".$port);
                shell_exec("php -S 0.0.0.0:".$port." -t public/");
            }else{
                $port = $COMAND[2];
                $CLI->success("Server started at: http://localhost:$port");
                shell_exec("php -S 0.0.0.0:".$port." -t public/");
            }
        }
    }
    elseif($COMAND[1] == '--git'){
        
        if($COMAND[2] == "push"){
            if($config['servername'] !=""){
                if(readline("Do you want to add a backup of your DB to github (y / n): ") == 'y'){
                    if ($conn->connect_error) {
                        $CLI->error("DB connection failed: " . $conn->connect_error);
                    }
                    else{
                        $CLI->success("DB connected successfully");
                        $CLI->output("Downloading a DB backup");
                        $dbBackup = new DBbackup($config['servername'], $config['dbname'], $config['username'], $config['password']);
                        $dbBackup->backup();
                        $CLI->success("DB backup saved");
                    }
                }else{
                    $CLI->output("DB backup skipped");
                }
            }
            else{
                $CLI->output("DB connection not set so DB will not be added to git");
            }
            if($COMAND[2] == "-f"){
                shell_exec("git add .");
                $commit = readline("Commit: ");
                if($commit != ""){
                    shell_exec('git commit -m "'.$commit.'"');
                    shell_exec('git push origin main -f');
                }else{
                    $CLI->error('commit cannot be null');
                }
            }
            elseif($COMAND[2] == "deploy"){
                shell_exec("git add .");
                $commit = "Deploy project";
                if($commit != ""){
                    shell_exec('git commit -m "'.$commit.'"');
                    shell_exec('git push origin main');
                }else{
                    $CLI->error('commit cannot be null');
                }
            }else{
                shell_exec("git add .");
                $commit = readline("Commit: ");
                if($commit != ""){
                    shell_exec('git commit -m "'.$commit.'"');
                    shell_exec('git push origin main');
                }else{
                    $commit ="Updates ".date('Y-m-d h:m:s');
                    shell_exec('git commit -m "'.$commit.'"');
                    shell_exec('git push origin main');
                }
            }
            if(file_exists('.github/workflows/main.yml')){
                $CLI->success('Github deploy started');
            }
        }elseif($COMAND[2] == "make" && $COMAND[4] == "deploy"){
            if(file_exists('config.ini') && $config['appname'] !=""){
                if(!file_exists('.github/workflows/main.yml')){
                    $server = readline("server: ");
                    $user = readline("user: ");
                    $password = readline("password: ");
                    $dir = readline("Dir: ");
                    if($COMAND[3] == "sftp"){
                        $port = readline("Port: ");
                    }
                    include('storage/workflow.php');
                    if($COMAND[3] == "ftp"){
                        if($server == "" && $user == "" && $password == ""){
                            if($dir == ""){
                                $code = $secretsFTPDefault;
                            }else{
                                $code = $secretsFTP;
                            }
                        }else{
                            if($dir == ""){
                                $code = $customFTPDefault;
                            }else{
                                $code = $customFTP;
                            }
                        }
                    }else{
                        if($server == "" && $user == "" && $password == "" && $port ==""){
                            if($dir == ""){
                                $code = $secretsSFTPDefault;
                            }else{
                                $code = $secretsSFTP;
                            }
                        }else{
                            if($dir == ""){
                                $code = $customDefaultSFTP;
                            }else{
                                $code = $customSFTP;
                            }
                        }

                    }
                    if(mkdir('.github/workflows', 0777, true)){
                        $CLI->success('.github/workflows created');
                    }else{
                        $CLI->error('An error occured while creating workflow directory');
                        exit(0);
                    }
                    if(file_put_contents('.github/workflows/main.yml',$code)){
                        $CLI->success('Github deploy on push is ready');
                    }
                }else{
                    $CLI->error('Already configured');
                }
                shell_exec("php cli --git push deploy");

            }else{
                $CLI->error('Please add an appname or configure cli by running php cli --config');
            }

        }else{
            $CLI->error('Unkown git command');
            $CLI->output("Avalable commands: \n");
            $CLI->output("php cli --git push (push all changes to github) \n");
            $CLI->output("php cli --git push -f (replaces the git with new files) \n");
            $CLI->output("php cli --git ftp-deploy (deploys code to ftp server) \n");
        }
    }
    elseif($COMAND[1] == '--config'){

        if(!file_exists('config.ini')){
            $CLI->output("\nconfigure app");

            while($appName == ""){
                $appName = readline("App Name: ");
            }

            $CLI->output("\nconfigure database");
            $servername = readline("servername: ");
            $username = readline("username: ");
            $password = readline("password: ");
            $dbname = readline("dbname: ");

            $CLI->output("\nconfigure SMTP server");
            $SMTPservername = readline("servername: ");
            $SMTPusername = readline("username: ");
            $SMTPpassword = readline("password: ");
            $SMTPport = readline("port: ");

            $CLI->output("\nconfigure security encryption keys");
            if($CLI->input("Do you want to autogenerate keys (y/n): ") == "y"){
                $SECURITY_KEY_ONE = $TOKEN_GENERATOR->newToken(8);
                $SECURITY_KEY_TWO = $TOKEN_GENERATOR->newToken(4);

            }else{
                while($SECURITY_KEY_ONE == ""){
                    $SECURITY_KEY_ONE = readline("SECURITY_KEY_ONE: ");
                }
                while($SECURITY_KEY_TWO == ""){
                    $SECURITY_KEY_TWO = readline("SECURITY_KEY_TWO: ");
                }
            }
        }
        if(file_exists('storage/db_backup.sql')){
            $CLI->success('DB backup exits. You can import db from this file');
        }

        include('storage/installer.php');
        if(!file_exists('public/.htaccess')){
            file_put_contents('public/.htaccess',$HTACESS);
            $CLI->success('.htaccess created');
        }else{
            $CLI->error('.htaccess exist');
        }

        if(!file_exists('config.ini')){
            file_put_contents('config.ini',$CONFIG);
            $CLI->success('config.ini created');
        }else{
            $CLI->error('config.ini exist');
        }
        if(mkdir('storage/cache', 0777, true)){
            $CLI->success('blade cache created');
        }
        if(mkdir('storage/logs', 0777, true)){
            $CLI->success('logs created');
        }
        $CLI->output('creating core folders');
        if(mkdir('database/create', 0777, true)){
            $CLI->success('database/create created');
        }
        if(mkdir('comands', 0777, true)){
            $CLI->success('comands created');
        }
        if(mkdir('api', 0777, true)){
            $CLI->success('api created');
        }
        if(!file_exists('composer.phar')){
            $CLI->output('Downloading composer.phar please wait ...');
            if(file_put_contents('composer.phar',file_get_contents('https://getcomposer.org/download/latest-stable/composer.phar'))){
                $CLI->success('Composer saved');
                if(file_exists('composer.lock')){
                    $CLI->output('updating composer files');
                    shell_exec('php composer.phar update');
                    $CLI->output('installing composer files');
                    shell_exec('php composer.phar install');
                }
                elseif(file_exists('composer.json')){
                    $CLI->output('updating composer files');
                    shell_exec('php composer.phar update');
                    $CLI->output('installing composer files');
                    shell_exec('php composer.phar install');
                }
            }else{
                $CLI->error('Failed to download composer');
            }
        }
        if(file_exists('composer.phar')){
            shell_exec('php composer.phar require phpmailer/phpmailer');
            shell_exec('php composer.phar require --dev phpunit/phpunit ^9');
        }
        $CLI->success('CLI config completed :)');
    }
    //create command
    elseif($COMAND[1] == 'create'){
        //create table
        if($COMAND[2] == 'table'){
            $TABLE_NAME = $COMAND[3];
            include('database/data/create.php');
            $CODE = $DATA;
            if(!file_exists('database/create/'.$TABLE_NAME.'.db.php')){
                if(file_put_contents('database/create/'.$TABLE_NAME.'.db.php',$CODE)){
                    include('database/create/'.$TABLE_NAME.'.db.php');
                }else{
                    $CLI->error('Failed to create table '.$TABLE_NAME);
                }
            }else{
                $CLI->error('Failed to create table '.$TABLE_NAME.' -> table exist');
            }
        }
        //create handler
        if($COMAND[2] == 'handler'){
            $HANDLER_NAME = $COMAND[3];
            include('handlers/data/create.php');
            $CODE = $DATA;
            if(!file_exists('handlers/'.$HANDLER_NAME.'.handler.php')){
                if(file_put_contents('handlers/'.$HANDLER_NAME.'.handler.php',$CODE)){
                    $CLI->success('handler created in handlers/'.$HANDLER_NAME.'.handler.php');
                }else{
                    $CLI->error('Failed to create handler '.$HANDLER_NAME);
                }
            }else{
                $CLI->error('Failed to create handler '.$HANDLER_NAME.' -> handler exist');
            }
        }
        //create api
        if($COMAND[2] == 'api'){
            $API_NAME = $COMAND[3];
            include('handlers/data/create.php');
            $CODE = $DATA;
            if(!file_exists('api/'.$API_NAME.'.api.php')){
                if(file_put_contents('api/'.$API_NAME.'.api.php',$CODE)){
                    $CLI->success('api created in api/'.$API_NAME.'.api.php');
                }else{
                    $CLI->error('Failed to create api '.$API_NAME);
                }
            }else{
                $CLI->error('Failed to create api '.$API_NAME.' -> api exist');
            }
        }
        //create a run command
        if($COMAND[2] == 'run-command'){
            $COMAND_NAME = $COMAND[3];
            $CODE = '<?php // use $CLI->success() $CLI->error() and $CLI->output() to show outputs and use $CLI->input() to get a user input'."\n";
            if(!file_exists('comands/'.$COMAND_NAME.'.php')){
                if(file_put_contents('comands/'.$COMAND_NAME.'.php',$CODE)){
                    $CLI->success('command created in comands/'.$COMAND_NAME.'.php');
                }else{
                    $CLI->error('Failed to create command '.$COMAND_NAME);
                }
            }else{
                $CLI->error('Failed to create command '.$COMAND_NAME.' -> command exist');
            }
        }
    }
    //drop-tables command
    elseif($COMAND[1] == 'drop-tables'){
        $conn->query('SET foreign_key_checks = 0');
        if ($result = $conn->query("SHOW TABLES"))
        {
            while($row = $result->fetch_array(MYSQLI_NUM))
            {
                $conn->query('DROP TABLE IF EXISTS '.$row[0]);
                $CLI->success($row[0]." table droped \n");
            }
        }
        
        $conn->query('SET foreign_key_checks = 1');
        $conn->close();
        $FILES = scandir('database/create/');
        $i=2;
        while($FILES[$i] != ""){
            $FILE = $FILES[$i];
            unlink('database/create/'.$FILE);
            $i++;
        }
        $CLI->success('Droped all tables');
    }
    elseif($COMAND[1] == 'drop-table'){
        $TABLE_NAME = $COMAND[2];
        $conn->query('DROP TABLE IF EXISTS '.$TABLE_NAME);
        unlink('database/create/'.$TABLE_NAME.'.db.php');
        $CLI->success($TABLE_NAME." table droped");
    }
    elseif($COMAND[1] == 'recreate-table'){
        $TABLE_NAME = $COMAND[2];
        $conn->query('DROP TABLE IF EXISTS '.$TABLE_NAME);
        include('database/create/'.$TABLE_NAME.'.db.php');
        $CLI->success($TABLE_NAME." recreated");
    }
    //recreate-tables command
    elseif($COMAND[1] == 'recreate-tables'){
        $conn->query('SET foreign_key_checks = 0');
        if ($result = $conn->query("SHOW TABLES"))
        {
            while($row = $result->fetch_array(MYSQLI_NUM))
            {
                $conn->query('DROP TABLE IF EXISTS '.$row[0]);
                $CLI->success($row[0]." table droped \n");
            }
        }
        
        $conn->query('SET foreign_key_checks = 1');
        $FILES = scandir('database/create/');
        $i=2;
        while($FILES[$i] != ""){
            $FILE = $FILES[$i];
            include('database/create/'.$FILE);
            $TABLE_NAME = explode('.db',$FILE)[0];
            $i++;
        }
        $CLI->success('All tables created again'."\n");
    }
    //test command
    elseif($COMAND[1] == 'test'){
        //data base connection tester
        if($COMAND[2] == 'data-base-connection'){
            // Check connection
            if ($conn->connect_error) {
                $CLI->error("Connection failed: " . $conn->connect_error);
            }
            else{
                $CLI->success("Connected successfully");
            }
        }
    }
    //pwa generator command
    elseif($COMAND[1] == 'pwa-code'){
        if(!file_exists('pwa')){
            if(mkdir('pwa', 0777, true)){
                $CLI->success("pwa folder created");
            }else{
                $CLI->error('Failed to create pwa folder');
            }
        }
        include('storage/sw.php');
        $CLI->output('default = does not work offline');
        $CLI->output('default_with_onesignal = does not work offline and has onesignal service worker built in');
        $CLI->output('offline_support = Works offline');
        $CLI->output('offline_support_with_onesignal = Works offline and has onesignal service worker built in');
        $service_worker_type = $CLI->input('service_worker type: ');
        if($service_worker_type == "default"){
            $sw = $default;
            $onsignal =  false;
        }
        if($service_worker_type == "default_with_onesignal"){
            $sw = $default_with_onesignal;
            $onsignal =  true;
        }
        if($service_worker_type == "offline_support"){
            $sw = $offline_support;
            $onsignal =  false;
        }
        if($service_worker_type == "offline_support_with_onesignal"){
            $sw = $offline_support_with_onesignal;
            $onsignal =  true;
        }
        $name = $CLI->input('PWA name: ');
        $short_name = $CLI->input('PWA short name: ');
        $bg_color = $CLI->input('PWA background color: ');
        $theme_color = $CLI->input('PWA theme color: ');
        $icon = $CLI->input('PWA app icon url (must be a square png image): ');
        $icon_size = $CLI->input('PWA app icon size (eg: 150x150): ');
        include('storage/mainfest.php');
        
        if($onsignal == false){
            if(file_put_contents('sw.js',$sw)){
                $CLI->success('Service worker saved at : /sw.js');
            }else{
                $CLI->error('Failed to save sw.js');
            }
            $registerjs = $register_default;
        }if($onsignal == true){
            $registerjs = $register_onesignal_default;
            if(file_put_contents('OneSignalSDKWorker.js',$sw)){
                $CLI->success('Service worker saved at : /OneSignalSDKWorker.js');
            }else{
                $CLI->error('Failed to save OneSignalSDKWorker.js');
            }
        }
        
        if(file_put_contents('register.js',$registerjs)){
            $CLI->success('Service worker register saved at : /register.js');
            $CLI->output('<script src="/register.js"></script>');
        }else{
            $CLI->error('Failed to save register.js');
        }

        if(file_put_contents('app-manifest.json',$manifest)){
            $CLI->success('mainfest file saved : /app-manifest.json');
            $CLI->output('<meta name="apple-mobile-web-app-capable" content="yes" />');
            $CLI->output('<link rel="manifest" href="/app-manifest.json">');
        }else{
            $CLI->error('Failed to save app-manifest.json');
        }
        
        shell_exec('npx pwa-asset-generator '.$icon.' pwa/');

    }
    elseif($COMAND[1] == 'run'){
        $FILE_NAME = $COMAND[2];
        if(file_exists("comands/$FILE_NAME.php")){
            include("comands/$FILE_NAME.php");
        }else{
            $CLI->error('Unkown run command.'); 
        }
        
    }
    elseif($COMAND[1] == 'db'){

        if($COMAND[2] == "backup"){
        
            if ($conn->connect_error) {
                $CLI->error("DB connection failed: " . $conn->connect_error);
            }
            else{
                $CLI->success("DB connected successfully");
                $CLI->output("Downloading a DB backup");
                $dbBackup = new DBbackup($config['servername'], $config['dbname'], $config['username'], $config['password']);
                $dbBackup->backup();
                $CLI->success("DB backup saved");
            }

        }else{
            $CLI->error('Unkown db command');
        }
        
    }
    elseif($COMAND[1] == 'install'){
        $packageName = $COMAND[2];
        if(!file_exists('composer.phar')){
            $CLI->output('Downloading composer.phar please wait ...');
            if(file_put_contents('composer.phar',file_get_contents('https://getcomposer.org/download/latest-stable/composer.phar'))){
                $CLI->success('Composer saved');
                if(file_exists('composer.lock')){
                    $CLI->output('updating composer files');
                    shell_exec('php composer.phar update');
                    $CLI->output('installing composer files');
                    shell_exec('php composer.phar install');
                }
                if(file_exists('composer.json')){
                    $CLI->output('updating composer files');
                    shell_exec('php composer.phar update');
                    $CLI->output('installing composer files');
                    shell_exec('php composer.phar install');
                }
            }else{
                $CLI->error('Failed to download composer');
            }
        }
        shell_exec('php composer.phar require '.$packageName);
    }
    elseif($COMAND[1] == 'docker'){
        if($COMAND[2] == "make" && $COMAND[3] == "container"){
            if(file_exists('config.ini')){
                include('storage/docker-compose.php');
                if(file_put_contents('docker-compose.yaml',$output) && file_put_contents('Dockerfile',file_get_contents('Dockerfile'))){
                    if($config['servername'] != ""){
                        shell_exec('php cli db backup');
                    }
                    if(!shell_exec('docker-compose up')){
                        $CLI->error('Failed to start docker container');
                    }else{
                        if($config['servername'] != ""){
                            $CLI->output('import db from http://localhost:'.$config['port'].'/phpmyadmin');
                        }
                    }
                }else{
                    $CLI->error('Failed to make a docker container');
                }
            }
        }
    }
    elseif($COMAND[1] == '--test'){
        exec('./vendor/bin/phpunit --testdox tests', $outputs, $retval);
        //$CLI->output("Returned with status $retval and output:");
        foreach($outputs as $output){
            $CLI->output($output);
        }
    }
    elseif($COMAND[1] == 'purge-cache'){
        if(rmdir('storage/cache') && unlink('storage/cachelog.log') && mkdir('storage/cache', 0777, true)){
            shell_exec('php composer.phar dump-autoload');
            $CLI->success('Cache purged');
        }else{
            $CLI->error('Failed to purge cache');
        }
    }
    //unidentified command
    else{
        $CLI->error('Unkown command. Try using --help');
    }
}
